import csv
import io
import math
from typing import cast

from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Audio,
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    Video,
)

from filters import IsAdminFilter
from fsm import FSMAdmin
from keyboards import AcceptCancelKeyboard, AdminPanelKeyboard, CancelKeyboard
from models import SongTempo, SongType, User
from service import GenreService, SongService, UserService

router = Router()
router.message.filter(IsAdminFilter())

TypeRus = {
    SongType.universal.value: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è",
    SongType.male.value: "–ú—É–∂—Å–∫–∞—è",
    SongType.female.value: "–ñ–µ–Ω—Å–∫–∞—è",
    SongType.duet.value: "–î—É—ç—Ç",
    "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è": SongType.universal.value,
    "–ú—É–∂—Å–∫–∞—è": SongType.male.value,
    "–ñ–µ–Ω—Å–∫–∞—è": SongType.female.value,
    "–î—É—ç—Ç": SongType.duet.value,
}

TempoRus = {
    SongTempo.dance.value: "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è",
    SongTempo.mid_tempo.value: "–°—Ä–µ–¥–Ω–µ—Ç–µ–º–ø–æ–≤–∞—è",
    SongTempo.slow.value: "–ú–µ–¥–ª–µ–Ω–Ω–∞—è",
    "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è": SongTempo.dance.value,
    "–°—Ä–µ–¥–Ω–µ—Ç–µ–º–ø–æ–≤–∞—è": SongTempo.mid_tempo.value,
    "–ú–µ–¥–ª–µ–Ω–Ω–∞—è": SongTempo.slow.value,
}


@router.message(F.text == "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def handle_admin_panel(message: Message, state: FSMContext) -> None:
    await state.clear()

    text = (
        "üîê <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
        "üõ† –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = AdminPanelKeyboard()()
    await message.answer(text, reply_markup=keyboard)


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", FSMAdmin.confirm_data)
async def process_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=AdminPanelKeyboard()())

    await handle_admin_panel(message, state)


@router.message(Command("cancel"), ~StateFilter(None))
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", ~StateFilter(None))
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=AdminPanelKeyboard()())

    await handle_admin_panel(message, state)


@router.message(F.text == "üéµ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é")
async def start_create_song(message: Message, state: FSMContext):
    await state.set_state(FSMAdmin.enter_title)
    await message.answer("üé∂ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:", reply_markup=CancelKeyboard()())


@router.message(FSMAdmin.enter_title)
async def process_title(message: Message, state: FSMContext, song_service: SongService):
    if len(str(message.text)) > 150:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 150 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    if await song_service.get_by_title(str(message.text)):
        await message.answer("‚ùå –ü–µ—Å–Ω—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! ")
        return

    await state.update_data(title=message.text)
    await state.set_state(FSMAdmin.select_type)

    buttons = [[InlineKeyboardButton(text=TypeRus[t.value], callback_data=t.value)] for t in SongType]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("üéö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Å–Ω–∏:", reply_markup=keyboard)


@router.callback_query(FSMAdmin.select_type)
async def process_type(callback: CallbackQuery, state: FSMContext):
    song_type = callback.data
    await state.update_data(type_str=song_type)
    await state.set_state(FSMAdmin.select_tempo)

    buttons = [[InlineKeyboardButton(text=TempoRus[t.value], callback_data=t.value)] for t in SongTempo]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text("üéõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø –ø–µ—Å–Ω–∏:", reply_markup=keyboard)  # type: ignore


@router.callback_query(FSMAdmin.select_tempo)
async def process_tempo(callback: CallbackQuery, state: FSMContext):
    tempo = callback.data
    await state.update_data(tempo_str=tempo)
    await state.set_state(FSMAdmin.enter_genres)

    await callback.message.answer(  # type: ignore
        "üé≠ –í–≤–µ–¥–∏—Ç–µ –¥–æ 3 –∂–∞–Ω—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: –†–æ–∫, –ü–æ–ø, –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\n\n"
        "‚ö†Ô∏è –ï—Å–ª–∏ –∂–∞–Ω—Ä–∞ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ - –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        reply_markup=CancelKeyboard()(),
    )
    await callback.answer()
    await callback.message.delete()  # type: ignore


@router.message(FSMAdmin.enter_genres)
async def process_genres_input(message: Message, genre_service: GenreService, state: FSMContext):
    genres_input = str(message.text).strip()

    # –†–∞–∑–¥–µ–ª—è–µ–º –∂–∞–Ω—Ä—ã –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
    genre_titles = [g.strip().lower() for g in genres_input.split(",") if g.strip()]

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not genre_titles:
        await message.answer("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∂–∞–Ω—Ä!")
        return

    if len(genre_titles) > 3:
        await message.answer("‚ùå –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –∂–∞–Ω—Ä–æ–≤!")
        return

    valid_genres = []
    for title in genre_titles:
        if len(title) > 150:
            await message.answer(f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {title}")
            return

        genre = await genre_service.get_or_create(title)
        if not genre:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∂–∞–Ω—Ä–∞ {title}")
            return
        valid_genres.append(genre.title)

    await state.update_data(genre_ids=valid_genres)
    await state.set_state(FSMAdmin.enter_lyrics)

    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=CancelKeyboard()(),
    )


@router.message(FSMAdmin.enter_lyrics)
async def process_lyrics(message: Message, state: FSMContext):
    lyrics = message.text if message.text != "-" else None
    await state.update_data(lyrics=lyrics)
    await state.set_state(FSMAdmin.upload_video)

    await message.answer(
        "üéµ <b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ø–µ—Å–Ω–∏</b>\n"
        "‚ñ∏ –§–æ—Ä–º–∞—Ç—ã: <code>MP3</code>, <code>MP4</code>\n"
        "‚ñ∏ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: <code>50MB</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª</b>, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_video")]],
        ),
        parse_mode="HTML",
    )


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ
@router.message(FSMAdmin.upload_video, F.video)
async def process_video(message: Message, state: FSMContext):
    video = cast(Video, message.video)

    await state.update_data(file_id=video.file_id, file_type="video")
    await handle_confirmation(message, state)


@router.message(FSMAdmin.upload_video, F.audio)
async def process_audio(message: Message, state: FSMContext):
    audio = cast(Audio, message.audio)

    await state.update_data(file_id=audio.file_id, file_type="audio")
    await handle_confirmation(message, state)


@router.callback_query(FSMAdmin.upload_video, F.data == "skip_video")
async def skip_video(callback: CallbackQuery, state: FSMContext):
    await state.update_data(file_id=None)
    await handle_confirmation(callback.message, state)  # type: ignore
    await callback.answer()


async def handle_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()

    confirmation_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üé∂ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"üéö –¢–∏–ø: {TypeRus[data['type_str']].capitalize()}\n"
        f"üéõ –¢–µ–º–ø: {TempoRus[data['tempo_str']].capitalize()}\n"
        f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(s.capitalize() for s in data['genre_ids'])}\n"
        f"üìù –¢–µ–∫—Å—Ç: {'—É–∫–∞–∑–∞–Ω' if data['lyrics'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üéµ –ú–µ–¥–∏–∞: {'–¥–æ–±–∞–≤–ª–µ–Ω–æ' if data.get('file_id') else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    await state.set_state(FSMAdmin.confirm_data)
    await message.answer(confirmation_text, reply_markup=AcceptCancelKeyboard()())


@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", FSMAdmin.confirm_data)
async def process_confirm(message: Message, state: FSMContext, song_service: SongService, current_user: User):
    data = await state.get_data()

    song = await song_service.create_with_genres(
        author_id=str(current_user.id),
        title=data["title"],
        genre_ids=data["genre_ids"],
        lyrics=data.get("lyrics"),
        type_str=data["type_str"],
        tempo_str=data["tempo_str"],
        file_id=data.get("file_id"),
        file_type_str=data.get("file_type", None),
    )
    if not song:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏")
        return

    await state.clear()
    await message.answer(
        "‚úÖ –ü–µ—Å–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
        reply_markup=AdminPanelKeyboard()(),
    )

    await handle_admin_panel(message, state)


@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω—é")
async def admin_start_delete(message: Message, state: FSMContext):
    await state.set_state(FSMAdmin.enter_delete_title)
    await message.answer(
        "üóë –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=CancelKeyboard()(),
    )


@router.message(FSMAdmin.enter_delete_title)
async def admin_process_delete(
    message: Message,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
):
    title = str(message.text).strip()
    song = await song_service.get_by_title(title)

    if not song:
        await message.answer(f"‚ùå –ü–µ—Å–Ω—è ¬´{title}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        await handle_admin_panel(message, state)
        return

    for customer in await song_service.get_customers(song.id):
        await user_service.log_view(customer.id, song.title, "delete")
    await song_service.delete(song.id)
    await state.clear()
    await message.answer(
        f"‚úÖ –ü–µ—Å–Ω—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{title}¬ª —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=AdminPanelKeyboard()(),
    )
    await handle_admin_panel(message, state)


"""User history handlers"""

PAGE_SIZE = 20


@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def admin_request_history(message: Message, state: FSMContext, user_service: UserService):
    await state.clear()
    await state.set_state(FSMAdmin.enter_username)

    users = await user_service.get()
    users_text = "\n".join([f"üë§ @{u.username} (ID: {u.id})" for u in users])

    await message.answer(
        f"üìú –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ username, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:\n\n"
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n{users_text}",
        reply_markup=CancelKeyboard()(),
        parse_mode="HTML",
    )


@router.message(FSMAdmin.enter_username)
async def admin_process_username(
    message: Message,
    state: FSMContext,
    user_service: UserService,
):
    identifier = str(message.text).strip().lstrip("@")
    user = await user_service.get_by_username(identifier)
    if not user:
        user = await user_service.get_one(identifier)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
        return

    await state.update_data(
        target_user_id=str(user.id),
        target_username=user.username,
        history_page=0,
    )
    await show_history_page(message, state, user_service)


async def show_history_page(msg: Message | CallbackQuery, state: FSMContext, user_service: UserService):
    data = await state.get_data()
    user_id = data["target_user_id"]
    username = data["target_username"]
    page = data["history_page"]

    history = await user_service.get_history(user_id)
    total = len(history)
    pages = math.ceil(total / PAGE_SIZE)

    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    chunk = history[::-1][start:end]

    lines = []
    for rec in chunk:
        action_fixed = f"{rec.action:<6}"
        ts_str = rec.viewed_at.strftime("%d.%m.%Y %H:%M")
        lines.append(f"{ts_str} ‚Äî <i>{action_fixed}</i> ‚Äî <b>{rec.song_title}</b>")

    header = f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è @{username}</b> " f"({start+1}‚Äì{min(end, total)} –∏–∑ {total}):\n\n"
    text = header + "\n".join(lines)

    cart_items = await user_service.get_wishlist(user_id)

    if cart_items:
        cart_text = "\n".join([f"üõí {item.title}" for item in cart_items])
        text += f"\n\n<b>–ö–æ—Ä–∑–∏–Ω–∞:</b>\n{cart_text}"
    else:
        text += "\n\n<b>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</b>"

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="history:prev"))
    if page < pages - 1:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="history:next"))
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            nav_row,
            [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="history:export")],
            [InlineKeyboardButton(text="üè† –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:panel")],
        ],
    )

    if isinstance(msg, CallbackQuery):
        await msg.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")  # type: ignore
        await msg.answer()
    else:
        await msg.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "history:export")
async def history_export(callback: CallbackQuery, state: FSMContext, user_service: UserService):
    data = await state.get_data()
    user_id = data["target_user_id"]
    username = data["target_username"]

    history = (await user_service.get_history(user_id))[::-1]

    # –°–æ–∑–¥–∞—ë–º CSV –≤ –ø–∞–º—è—Ç–∏
    buffer = io.StringIO()
    writer = csv.writer(buffer)
    writer.writerow(["Timestamp", "Action", "Song Title"])
    for rec in history:
        ts = rec.viewed_at.strftime("%Y-%m-%d %H:%M:%S")
        writer.writerow([ts, rec.action, rec.song_title])
    csv_text = buffer.getvalue().encode("utf-8")  # bytes

    file = BufferedInputFile(csv_text, filename=f"history_{username}.csv")

    await callback.message.answer_document(  # type: ignore
        document=file,
        caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ @{username}",
    )
    await callback.answer("–§–∞–π–ª CSV –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


@router.callback_query(F.data == "history:prev")
async def history_prev(callback: CallbackQuery, state: FSMContext, user_service: UserService):
    data = await state.get_data()
    await state.update_data(history_page=data["history_page"] - 1)
    await show_history_page(callback, state, user_service)


@router.callback_query(F.data == "history:next")
async def history_next(callback: CallbackQuery, state: FSMContext, user_service: UserService):
    data = await state.get_data()
    await state.update_data(history_page=data["history_page"] + 1)
    await show_history_page(callback, state, user_service)


@router.callback_query(F.data == "admin:panel")
async def history_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    await handle_admin_panel(callback.message, state)
    await callback.message.delete()  # type: ignore


__all__ = ["router"]
