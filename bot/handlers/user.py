from io import BytesIO

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from fsm import FSMUser
from keyboards import ToMainMenu
from models import SongTempo, SongType, User
from service import GenreService, SongService, UserService

router = Router()

TypeRus = {
    SongType.universal.value: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è",
    SongType.male.value: "–ú—É–∂—Å–∫–∞—è",
    SongType.female.value: "–ñ–µ–Ω—Å–∫–∞—è",
    SongType.duet.value: "–î—É—ç—Ç",
    "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è": SongType.universal.value,
    "–ú—É–∂—Å–∫–∞—è": SongType.male.value,
    "–ñ–µ–Ω—Å–∫–∞—è": SongType.female.value,
    "–î—É—ç—Ç": SongType.duet.value,
}

TempoRus = {
    SongTempo.dance.value: "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è",
    SongTempo.mid_tempo.value: "–°—Ä–µ–¥–Ω–µ—Ç–µ–º–ø–æ–≤–∞—è",
    SongTempo.slow.value: "–ú–µ–¥–ª–µ–Ω–Ω–∞—è",
    "–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è": SongTempo.dance.value,
    "–°—Ä–µ–¥–Ω–µ—Ç–µ–º–ø–æ–≤–∞—è": SongTempo.mid_tempo.value,
    "–ú–µ–¥–ª–µ–Ω–Ω–∞—è": SongTempo.slow.value,
}


@router.message(F.text == "üéµ –ö–∞—Ç–∞–ª–æ–≥ –ø–µ—Å–µ–Ω")
@router.message(Command("catalog"))
async def cmd_catalog(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(FSMUser.music_list)

    await message.answer(
        "<b>üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –ø–µ—Å–µ–Ω!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω–∏ –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É.\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω üëá",
        reply_markup=ToMainMenu()(),
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{TypeRus[t.value]}", callback_data=f"type:{t.value}")] for t in SongType
        ],
    )
    await message.answer(
        "üé∂ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Å–Ω–∏:</b>",
        reply_markup=keyboard,
    )


@router.callback_query(FSMUser.music_list, F.data.startswith("type:"))
async def on_type(callback: CallbackQuery, state: FSMContext):
    type_str = str(callback.data).split(":", 1)[1]
    await state.update_data(type_str=type_str)
    # –î–∞–ª—å—à–µ: —Å–ª—É—à–∞—Ç—å –≤—Å–µ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü–æ—Å–ª—É—à–∞—Ç—å –≤—Å–µ", callback_data="action:all")],
            [InlineKeyboardButton(text="üéö –í—ã–±—Ä–∞—Ç—å —Ç–µ–º–ø –∏ –∂–∞–Ω—Ä", callback_data="action:filter")],
        ],
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)  # type: ignore
    await callback.answer()


@router.callback_query(FSMUser.music_list, F.data == "action:all")
async def on_all(
    callback: CallbackQuery,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    data = await state.get_data()
    songs = await song_service.get_by_filter(data["type_str"], None, None)
    if not songs:
        await callback.message.edit_text("üòî –ü–µ—Å–µ–Ω –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")  # type: ignore
        await cmd_catalog(callback.message, state)
        return
    ids = list(dict.fromkeys(s.id for s in songs))
    await state.update_data(songs_list=ids, index=0)
    await send_current(callback.message, state, song_service, user_service, current_user)
    await callback.answer()
    await callback.message.delete()  # type: ignore


@router.callback_query(FSMUser.music_list, F.data == "action:filter")
async def on_filter(callback: CallbackQuery, state: FSMContext):
    # –í—ã–±–æ—Ä —Ç–µ–º–ø–∞
    buttons = [[InlineKeyboardButton(text=TempoRus[t.value], callback_data=f"tempo:{t.value}")] for t in SongTempo]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("üéõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø –ø–µ—Å–Ω–∏:", reply_markup=keyboard)  # type: ignore
    await callback.answer()


@router.callback_query(FSMUser.music_list, F.data.startswith("tempo:"))
async def on_tempo(callback: CallbackQuery, state: FSMContext, genre_service: GenreService):
    tempo_str = str(callback.data).split(":", 1)[1]
    await state.update_data(tempo_str=tempo_str)
    data = await state.get_data()
    selected: list[str] = data.get("genre_list", [])

    all_genres = await genre_service.get_all()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=(
            [
                [
                    InlineKeyboardButton(
                        text=("‚úÖ " if g.title in selected else "") + g.title,
                        callback_data=f"genre:{g.title}",
                    ),
                ]
                for g in all_genres
            ]
            + ([[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="genre:done")]] if selected else [])
        ),
    )
    await callback.message.edit_text("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=keyboard)  # type: ignore
    await callback.answer()


@router.callback_query(FSMUser.music_list, F.data == "genre:done")
async def on_genre_done(
    callback: CallbackQuery,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    data = await state.get_data()
    genres: list[str] = data.get("genre_list", [])
    if not genres:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∂–∞–Ω—Ä", show_alert=True)
        return

    songs = await song_service.get_by_filter(data["type_str"], data["tempo_str"], [g.lower() for g in genres])
    if not songs:
        await callback.message.edit_text("üòî –ü–µ—Å–µ–Ω –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")  # type: ignore
        await cmd_catalog(callback.message, state)
        return

    ids = list(dict.fromkeys(s.id for s in songs))
    await state.update_data(songs_list=ids, index=0)
    await send_current(callback.message, state, song_service, user_service, current_user)
    await callback.answer()
    await callback.message.delete()  # type: ignore


@router.callback_query(FSMUser.music_list, F.data.startswith("genre:"))
async def on_genre_toggle(callback: CallbackQuery, state: FSMContext, genre_service: GenreService):
    genre_title = str(callback.data).split(":", 1)[1]
    data = await state.get_data()
    selected: list[str] = data.get("genre_list", [])

    if genre_title in selected:
        selected.remove(genre_title)
    elif len(selected) < 3:
        selected.append(genre_title)
    else:
        await callback.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –∂–∞–Ω—Ä–æ–≤.")
        return

    await state.update_data(genre_list=selected)

    all_genres = await genre_service.get_all()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=(
            [
                [
                    InlineKeyboardButton(
                        text=("‚úÖ " if g.title in selected else "") + g.title,
                        callback_data=f"genre:{g.title}",
                    ),
                ]
                for g in all_genres
            ]
            + ([[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="genre:done")]] if selected else [])
        ),
    )

    await callback.message.edit_reply_markup(reply_markup=keyboard)  # type: ignore
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ: {len(selected)} –∏–∑ 3")


@router.callback_query(FSMUser.music_list, F.data == "nav:prev")
async def nav_prev(
    callback: CallbackQuery,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    data = await state.get_data()
    idx = (data["index"] - 1) % len(data["songs_list"])
    await callback.message.delete()  # type: ignore
    await state.update_data(index=idx)
    await send_current(callback.message, state, song_service, user_service, current_user)
    await callback.answer()


@router.callback_query(FSMUser.music_list, F.data == "nav:next")
async def nav_next(
    callback: CallbackQuery,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    data = await state.get_data()
    idx = (data["index"] + 1) % len(data["songs_list"])
    await callback.message.delete()  # type: ignore
    await state.update_data(index=idx)
    await send_current(callback.message, state, song_service, user_service, current_user)
    await callback.answer()


@router.callback_query(FSMUser.music_list, F.data == "nav:type")
async def nav_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type_str=None, tempo_str=None, genre=None)
    buttons = [[InlineKeyboardButton(text=TypeRus[t.value], callback_data=f"type:{t.value}")] for t in SongType]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üé∂ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Å–Ω–∏:", reply_markup=keyboard)  # type: ignore
    await callback.answer()
    await callback.message.delete()  # type: ignore


@router.callback_query(FSMUser.music_list, F.data == "nav:tempo")
async def nav_tempo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("type_str"):
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Å–Ω–∏", show_alert=True)
        return
    await state.update_data(tempo_str=None, genre=None)
    buttons = [[InlineKeyboardButton(text=TempoRus[t.value], callback_data=f"tempo:{t.value}")] for t in SongTempo]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üéõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø –ø–µ—Å–Ω–∏:", reply_markup=keyboard)  # type: ignore
    await callback.answer()
    await callback.message.delete()  # type: ignore


@router.callback_query(FSMUser.music_list, F.data == "nav:genre")
async def nav_genre(callback: CallbackQuery, state: FSMContext, genre_service: GenreService):
    data = await state.get_data()
    if not data.get("tempo_str"):
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø –ø–µ—Å–Ω–∏", show_alert=True)
        return
    selected: list[str] = data.get("genre_list", [])

    all_genres = await genre_service.get_all()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=(
            [
                [
                    InlineKeyboardButton(
                        text=("‚úÖ " if g.title in selected else "") + g.title,
                        callback_data=f"genre:{g.title}",
                    ),
                ]
                for g in all_genres
            ]
            + ([[InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="genre:done")]] if selected else [])
        ),
    )
    await callback.message.answer("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=keyboard)  # type: ignore
    await callback.answer()
    await callback.message.delete()  # type: ignore


@router.callback_query(FSMUser.music_list, F.data == "nav:like")
async def nav_like(
    callback: CallbackQuery,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    data = await state.get_data()
    song_id = data["songs_list"][data["index"]]
    song = await song_service.get_one(song_id)
    if not song:
        await callback.message.answer("üîé –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")  # type: ignore
        await cmd_catalog(callback.message, state)
        return
    await user_service.add_to_wishlist(current_user.id, song_id)
    await user_service.log_view(
        current_user.id,
        song.title,
        "like",
    )
    await callback.answer("‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")


async def send_current(
    msg_obj,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    data = await state.get_data()
    song_id = data["songs_list"][data["index"]]
    song = await song_service.get_one(song_id)
    if not song:
        await msg_obj.answer("üîé –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await cmd_catalog(msg_obj, state)
        return

    await user_service.log_view(current_user.id, song.title)

    text = (
        f"üéµ <b>{song.title}</b>\n\n"
        f"<b>–¢–∏–ø:</b> {TypeRus[song.type.value].capitalize()}\n"
        f"<b>–¢–µ–º–ø:</b> {TempoRus[song.tempo.value].replace('_', ' ').capitalize()}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> " + ", ".join(f"<i>#{g.title}</i>" for g in song.genres) + "\n\n"
    )

    btns = [InlineKeyboardButton(text="‚ù§Ô∏è –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data="nav:like")]
    if song.lyrics:
        btns.insert(0, InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="download:lyrics"))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:prev"),
                InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="nav:next"),
            ],
            [
                InlineKeyboardButton(text="üéö –î—Ä—É–≥–æ–π —Ç–µ–º–ø", callback_data="nav:tempo"),
                InlineKeyboardButton(text="üé≠ –î—Ä—É–≥–æ–π –∂–∞–Ω—Ä", callback_data="nav:genre"),
                InlineKeyboardButton(text="üéµ –î—Ä—É–≥–æ–π —Ç–∏–ø", callback_data="nav:type"),
            ],
            btns,
        ],
    )

    if song.file_id:
        await msg_obj.answer_video(song.file_id, caption=text, reply_markup=keyboard)
    else:
        await msg_obj.answer(text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "download:lyrics")
async def handle_download_lyrics(callback: CallbackQuery, state: FSMContext, song_service: SongService):
    data = await state.get_data()
    index = data.get("index")
    song_id = data["songs_list"][index]
    song = await song_service.get_one(song_id)

    if not song or not song.lyrics:
        await callback.message.answer("üîá –¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")  # type: ignore
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    file_content = song.lyrics
    file_name = f"{song.title}.txt"

    byte_stream = BytesIO(file_content.encode("utf-8"))
    file = BufferedInputFile(byte_stream.read(), filename=file_name)

    await callback.message.answer_document(document=file, caption=f"üìÑ –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏: <b>{song.title}</b>")  # type: ignore
    await callback.answer()


"""Wishlist handlers"""


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
@router.message(Command("wishlist"))
async def cmd_wishlist(
    message: Message,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    await state.clear()
    await state.set_state(FSMUser.music_list)

    songs = await user_service.get_wishlist(current_user.id)
    if not songs:
        return await message.answer("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=ToMainMenu()())

    await message.answer("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:", reply_markup=ToMainMenu()())
    ids = list(dict.fromkeys(s.id for s in songs))
    await state.update_data(songs_list=ids, index=0, in_wishlist=True)
    return await send_wishlist_current(
        message,
        state,
        song_service=song_service,
    )


# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ Wishlist
@router.callback_query(FSMUser.music_list, F.data == "wish:prev")
async def wish_prev(callback: CallbackQuery, state: FSMContext, song_service: SongService):
    data = await state.get_data()
    idx = (data["index"] - 1) % len(data["songs_list"])
    await callback.message.delete()  # type: ignore
    await state.update_data(index=idx)
    await send_wishlist_current(
        callback.message,
        state,
        song_service=song_service,
    )
    await callback.answer()


@router.callback_query(FSMUser.music_list, F.data == "wish:next")
async def wish_next(callback: CallbackQuery, state: FSMContext, song_service: SongService):
    data = await state.get_data()
    idx = (data["index"] + 1) % len(data["songs_list"])
    await callback.message.delete()  # type: ignore
    await state.update_data(index=idx)
    await send_wishlist_current(
        callback.message,
        state,
        song_service=song_service,
    )
    await callback.answer()


@router.callback_query(FSMUser.music_list, F.data == "wish:remove")
async def wish_remove(
    callback: CallbackQuery,
    state: FSMContext,
    song_service: SongService,
    user_service: UserService,
    current_user: User,
):
    data = await state.get_data()

    idx = data["index"]
    song_id = data["songs_list"][idx]
    await user_service.remove_from_wishlist(current_user.id, song_id)
    song = await song_service.get_one(song_id)
    if not song:
        await callback.message.answer("üîé –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")  # type: ignore
        await cmd_wishlist(callback.message, state)
        return
    await user_service.log_view(
        current_user.id,
        song.title,
        "remove",
    )

    songs_list = data["songs_list"]
    songs_list.pop(idx)
    if not songs_list:
        await state.clear()
        await callback.message.answer("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=ToMainMenu()())  # type: ignore
        await callback.answer()
        await callback.message.delete()  # type: ignore
        return

    new_idx = idx % len(songs_list)
    await state.update_data(songs_list=songs_list, index=new_idx)
    await send_wishlist_current(
        callback.message,
        state,
        song_service=song_service,
    )
    await callback.answer("üóë –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await callback.message.delete()  # type: ignore


async def send_wishlist_current(msg_obj, state: FSMContext, song_service: SongService):
    data = await state.get_data()
    idx = data["index"]
    song_id = data["songs_list"][idx]
    song = await song_service.get_one(song_id)
    if not song:
        await msg_obj.answer("üîé –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    text = (
        f"üéµ <b>{song.title}</b>\n\n"
        f"<b>–¢–∏–ø:</b> {TypeRus[song.type.value]}\n"
        f"<b>–¢–µ–º–ø:</b> {TempoRus[song.tempo.value].replace('_', ' ')}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> " + ", ".join(f"<i>#{g.title}</i>" for g in song.genres) + "\n\n"
    )

    btns = [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="wish:remove")]
    if song.lyrics:
        btns.insert(0, InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="download:lyrics"))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="wish:prev"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data="wish:next"),
            ],
            btns,
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="to_main")],
        ],
    )

    if song.file_id:
        await msg_obj.answer_video(song.file_id, caption=text, reply_markup=keyboard)
    else:
        await msg_obj.answer(text, reply_markup=keyboard)


__all__ = ["router"]
